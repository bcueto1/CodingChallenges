import java.util.HashMap;
import java.util.Map;

public class PermuttedSubstrings {
	
	HashMap<Character, Integer> littleStringMap = new HashMap<Character, Integer>();
	HashMap<Character, Integer> bigStringMap = new HashMap<Character, Integer>();
	
	private void addToMap(String myString, HashMap<Character, Integer> myMap) {
	    char[] temp = myString.toCharArray();
	    for (char c : temp) {
	        if (myMap.containsKey(c)) {
	            myMap.put(c, 1);
	        } else {
	        	myMap.put(c, myMap.get(c) + 1);
	        }
	    }
	}

	public boolean isPermutedSubstringInParentString(String A, String B) {
		this.addToMap(A, this.littleStringMap);
		String temp = "";
		
		for (int i = 0; i < B.length() - A.length(); i++) {
		    temp = B.substring(i, i + A.length());
		    int counter = 0;
		    this.addToMap(temp, bigStringMap);

		    for (Map.Entry<Character, Integer> letter:
		    		bigStringMap.entrySet()) {
		    	if (this.littleStringMap.containsKey(letter.getKey())) {
		    	    if (this.littleStringMap.get(letter.getKey()) ==
		    	    		letter.getValue()) {
		    	    	counter++;
		    	    }
		    	}
		    }
		    if (counter == A.length()) {
		        return true;
		    }
		}
		return false;
	}
}
