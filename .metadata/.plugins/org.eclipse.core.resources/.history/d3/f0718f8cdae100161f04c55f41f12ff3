import java.util.HashMap;

public class PermuttedSubstrings {
	
	/** HashMap that contains the alphabet associated with a different prime */
	private HashMap<Character, Integer> charPrimeMap =
			new HashMap<Character, Integer>();
	
	/** Constructor and initializes the charPrimeMap. */
	public PermuttedSubstrings() {
		char[] alphabetArray = "abcdefghijklmnopqrstuvwxyz".toCharArray();
		int[] primesArray = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101};
		for (int i = 0; i < 26; i++) {
		    charPrimeMap.put(alphabetArray[i], primesArray[i]);
		}
	}
	
	/**
	 * Gets a unique multiple of the primes associated with each letter.
	 * This works because of the fundamental theorem of arithmetic.
	 *
	 * @param myString The string inputed.
	 * @return A multiple based on primes based on the letters.
	 */
	private int getMultiple(String myString) {
		char[] temp = myString.toLowerCase().toCharArray();
		int multiple = 1;
		for (char letter: temp) {
			multiple *= this.charPrimeMap.get(letter);
		}
		return multiple;
	}

	/**
	 * Main method to determine if a permuted string is located within
	 * the parent string.
	 *
	 * @param A The little string.
	 * @param B The parent string.
	 * @return True if the permutation is present, false if otherwise.
	 */
	public boolean isPermutedSubstringInParentString(String A, String B)
			throws IOException {
		int smallString = this.getMultiple(A);
		int bigString = 0;
		for (int i = 0; i < B.length() - A.length() + 1; i++) {
			bigString = this.getMultiple(B.substring(i, i + A.length()));
			if (bigString == smallString) {
				return true;
			}
		}
		return false;
	}
}
