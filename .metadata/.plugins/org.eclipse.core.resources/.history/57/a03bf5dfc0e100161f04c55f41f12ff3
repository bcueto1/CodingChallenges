import java.util.HashMap;
import java.util.Map;

public class PermuttedSubstrings {
	
	/** HashMap that contains an array of characters from the little string. */
	private HashMap<Character, Integer> charPrimeMap = new HashMap<Character, Integer>();
	
	/**
	 * Method that adds characters to the hashmap and increases the value of each
	 * entry based on how many times a specific character is repeated.
	 *
	 * @param myString The String that we get the characters from.
	 * @param myMap The HashMap to insert character-integer entries.
	 */
	private void addToMap(String myString, HashMap<Character, Integer> myMap) {
	    char[] temp = myString.toCharArray();
	    for (char c : temp) {
	        if (myMap.containsKey(c)) {
	            myMap.put(c, 1);
	        } else {
	        	myMap.put(c, myMap.get(c) + 1);
	        }
	    }
	}

	/**
	 * Main method to determine if a permuted string is located within
	 * the parent string.
	 *
	 * @param A The little string.
	 * @param B The parent string.
	 * @return True if the permutation is present, false if otherwise.
	 */
	public boolean isPermutedSubstringInParentString(String A, String B) {
		return true;
	}
}
