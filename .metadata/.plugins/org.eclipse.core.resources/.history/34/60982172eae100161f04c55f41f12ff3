/**
 * Brian Michael Cueto
 * TripleLift Coding Challenge
 * Question 3: Permutations of a substring in a parent string.
 * Program dealing with problem 3 of the coding challenge.
 */

import java.io.IOException;
import java.util.HashMap;

/**
 * Program to see if given a substring A and a parent string B, where
 * A.length < B.length, determine if there exists some substring of B
 * which is a permutation of A.
 * 
 * I assumed that the string would only consist of lower case letters,
 * but the program can easily be modified to handle different ASCII
 * characters if needed. 
 * 
 * More explanation is included at each method, and the overall complexity
 * should be O(N), where N is the length of the larger string.
 */
public class PermuttedSubstrings {
	
	/** HashMap that contains the alphabet associated with a different prime. */
	private HashMap<Character, Integer> charPrimeMap =
			new HashMap<Character, Integer>();
	
	/**
	 * Constructor and initializes the charPrimeMap.
	 * I assumed this test would only be looking for alphabetical letters,
	 * but this could easily be changed if other string characters are needed.
	 * Since there are 26 letters, I paired each to the first 26 prime numbers.
	 *
	 * I inserted each character to each prime number using a hashmap, so lookup
	 * would only be O(1) each time.  Each total time to create this would be
	 * O(26), but if we want more than just lower case letters and use all ASCII
	 * characters, then it would be O(225), which should be advantageous if
	 * strings get much larger.
	 */
	public PermuttedSubstrings() {
		char[] alphabetArray = "abcdefghijklmnopqrstuvwxyz".toCharArray();
		int[] primesArray = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101};
		for (int i = 0; i < 26; i++) {
		    charPrimeMap.put(alphabetArray[i], primesArray[i]);
		}
	}
	
	/**
	 * Gets a unique multiple of the primes associated with each letter.
	 * This works because of the fundamental theorem of arithmetic.
	 *
	 * @param myString The string inputed.
	 * @return A multiple based on primes based on the letters.
	 */
	private int getMultiple(String myString) {
		char[] temp = myString.toLowerCase().toCharArray();
		int multiple = 1;
		for (char letter: temp) {
			multiple *= this.charPrimeMap.get(letter);
		}
		return multiple;
	}

	/**
	 * Main method to determine if a permuted string is located within
	 * the parent string.
	 *
	 * @param A The little string.
	 * @param B The parent string.
	 * @return True if the permutation is present, false if otherwise.
	 * @throws IOException if A is longer/equal than B or if both strings are empty.
	 */
	public boolean isPermutedSubstringInParentString(String A, String B)
			throws IOException {
		// Handles different edge cases.
		if (A.length() >= B.length()) {
			throw new IOException();
		}
		if (A.length() == 0 || B.length() == 0) {
			throw new IOException();
		}

		// Gets a value taken from the prime values of each character of A.
		// This is based on the charPrimeMap we use.  This takes O(m) time
		// overall, where m is the length of A.
		int smallString = this.getMultiple(A);
		int leftIndex = 0;
		int rightIndex = A.length();
		int bigString = this.getMultiple(B.substring(leftIndex, rightIndex));

		// We iterate through the big string, B, from the 0 position to
		// the length of B minus the length of A plus 1.  This goes through
		// every possible window of B to see if a permutation of A exists,
		// taking O(n - m + 1) time for the outer for loop, where n is the length of B
		// and m is the length of A.  If we take into account the operation we have
		// within the for loop,
		for (int i = leftIndex; i < B.length() - A.length(); i++) {
			int leftTemp = this.charPrimeMap.get(B.charAt(i));
			int rightTemp = this.charPrimeMap.get(B.charAt(i + A.length() + 1));
			bigString = bigString / leftTemp;
			bigString = bigString * rightTemp;
			if (bigString == smallString) {
				return true;
			}
		}
		/*
		for (int i = 0; i < B.length() - A.length() + 1; i++) {
			// We get a value based on the prime values of each character of
			// the specific substring of B.  We then compare if this value
			// is equal to the one we got from A, and if so, return true.
			// If not, iterate to the next substring.  This takes O(m) time
			// overall to do each, where m is the length of A/substring of B.
			bigString = this.getMultiple(B.substring(i, i + A.length()));
			if (bigString == smallString) {
				return true;
			}
		} */
		return false;
	}
}
